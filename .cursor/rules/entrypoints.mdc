---
description: 
globs: 
alwaysApply: true
---

There are two main entry points for execution: [train.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/scripts/train.py) and [run_analysis.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/scripts/run_analysis.py). 

When calling either script, the user passes a string which indicates (respectively) either the set of training runs to run, or the set of analyses to perform. Based on this string the script will load the matching config/hyperparameters from a YAML file under `rnns_learn_robust_motor_policies.config`. Likewise, it will load the run-specific implementation from modules under `rnns_learn_robust_motor_policies.training`, or `rnns_learn_robust_motor_policies.analysis.modules`. 

Within each module under `rnns_learn_robust_motor_policies.analysis.modules`, for example [plant_perts.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/src/rnns_learn_robust_motor_policies/analysis/modules/part1/plant_perts.py),

- `setup_eval_tasks_and_models` sets up the pairings of models to evaluate, and the tasks to evaluate them on. 
- `ALL_ANALYSES` is assigned a list of instances of `AbstractAnalysis` (defined in [analysis.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/src/rnns_learn_robust_motor_policies/analysis/analysis.py)). This defines the set of analyses to perform. 

Each subclass of `AbstractAnalysis` may define the `dependencies` field; [run_analysis.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/scripts/run_analysis.py) uses the tools in [_dependencies.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/src/rnns_learn_robust_motor_policies/analysis/_dependencies.py) to ensure that any dependencies of the set of analyses specified explicitly by `ALL_ANALYSES`, will be computed and passed as appropriate, and that each dependency will only be computed once if is a dependency of multiple entries in `ALL_ANALYSES`. 

Special types are defined in [types.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/src/rnns_learn_robust_motor_policies/types.py). In particular, `LDict` is used to label `dict` levels of a PyTree so that we can easily map their key values, to and from the values of (e.g.) columns in the database (see [database.py](mdc:41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/41 RNNs learn robust policies/src/rnns_learn_robust_motor_policies/database.py)) in which model, evaluation, and figure records are kept. 