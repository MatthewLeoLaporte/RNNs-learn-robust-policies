---
jupyter: python3
format:
  html:
    toc: true 
execute:
  echo: false
---

```{python}
NB_ID = "2-2"

# TODO: This is clear in the eval_rules file; probably don't need to specify here again
TRAIN_NB_ID = "2-1"  # Notebook the models were trained in
```

# Analysis of plant perturbations

## Environment setup

```{python}
%load_ext autoreload
%autoreload 2
```

```{python}
import os

os.environ["TF_CUDNN_DETERMINISTIC"] = "1"
```

```{python}
from collections import namedtuple
from functools import partial
from typing import Literal, Optional
from pathlib import Path

import equinox as eqx
import jax
import jax.numpy as jnp
import jax.random as jr
import jax.tree as jt
import matplotlib.pyplot as plt
import numpy as np
import plotly
import plotly.colors as plc
import plotly.graph_objects as go
from tqdm.auto import tqdm

from feedbax import (
    is_module, 
    is_type,
    load, 
    tree_set_scalar,
    tree_stack,
    tree_struct_bytes,
    tree_take, 
    tree_take_multi,
    tree_unzip,
)
from feedbax.channel import toggle_channel_noise
from feedbax.intervene import (
    CurlField, 
    FixedField, 
    add_intervenors, 
    schedule_intervenor,
)
from feedbax.misc import git_commit_id, attr_str_tree_to_where_func
import feedbax.plotly as fbp
from feedbax.task import SimpleReaches, TrialSpecDependency
from feedbax.xabdeef.losses import simple_reach_loss

from rnns_learn_robust_motor_policies import PROJECT_SEED
from rnns_learn_robust_motor_policies.colors import (
    COLORSCALES, 
    MEAN_LIGHTEN_FACTOR,
    get_colors_dicts,
)
from rnns_learn_robust_motor_policies.constants import INTERVENOR_LABEL, WORKSPACE
from rnns_learn_robust_motor_policies.database import (
    get_db_session,
)
from rnns_learn_robust_motor_policies.misc import lohi, load_from_json, print_version_info
from rnns_learn_robust_motor_policies.train_setup_part2 import (
    setup_task_model_pairs, 
)
from rnns_learn_robust_motor_policies.plot import (
    add_endpoint_traces,
)
from rnns_learn_robust_motor_policies.plot_utils import (
    figleaves,
    figs_flatten_with_paths,
    get_savefig_func,
)
from rnns_learn_robust_motor_policies.post_training import setup_replicate_info
from rnns_learn_robust_motor_policies.setup_utils import (
    display_model_filechooser,
    filename_join as join,
    find_unique_filepath,
    get_base_task,
    convert_tasks_to_small,
    set_model_noise,
    setup_models_only,
    setup_train_histories,
)
from rnns_learn_robust_motor_policies.state_utils import (
    get_aligned_vars,
    get_forward_lateral_vel, 
    get_lateral_distance,
    get_pos_endpoints,
    orthogonal_field,
    project_onto_direction,
    vmap_eval_ensemble,
)
from rnns_learn_robust_motor_policies.tree_utils import (
    pp,
    subdict, 
    swap_model_trainables, 
)
from rnns_learn_robust_motor_policies.types import (
    TrainStdDict, 
    ContextInputDict,
    PertAmpDict,
)
```

Log the library versions and the feedbax commit ID, so they appear in any reports generated from this notebook.

```{python}
print_version_info(jax, eqx, plotly)
```

### Initialize model database connection

```{python}
db_session = get_db_session()
```

### Hyperparameters

We may want to specify 1) which trained models to load, by their parameters, and 2) how to modify the model parameters for analysis.

```{python}
#| tags: [parameters]

# Specify which trained models to load 
disturbance_type_load: Literal['curl', 'random'] = 'random'
feedback_noise_std_load = 0.0
motor_noise_std_load = 0.0
feedback_delay_steps_load = 0
hidden_size = 50

# Specify model parameters to use for analysis (None -> use training value)
disturbance_type: Optional[Literal['curl', 'random']] = 'curl'
feedback_noise_std: Optional[float] = None
motor_noise_std: Optional[float] = None
```

These parameters may be passed as strings from the command line in some cases, so we need to cast them to be sure.

```{python}
feedback_noise_std_load = float(feedback_noise_std_load)
motor_noise_std_load = float(motor_noise_std_load)
feedback_delay_steps_load = int(feedback_delay_steps_load)
hidden_size = int(hidden_size)
if feedback_noise_std is not None:
    feedback_noise_std = float(feedback_noise_std)
if motor_noise_std is not None:
    motor_noise_std = float(motor_noise_std)
```

See further below for parameter-based loading of models, as well as the code that modifies the models prior to analysis.

### RNG setup

```{python}
key = jr.PRNGKey(PROJECT_SEED)
key_init, key_train, key_eval = jr.split(key, 3)
```

## Load and adjust trained models

```{python}
model_info = get_model_record(
    db_session,
    disturbance_type=disturbance_type_load,
    feedback_noise_std=feedback_noise_std_load,
    motor_noise_std=motor_noise_std_load,
    feedback_delay_steps=feedback_delay_steps_load,
    hidden_size=hidden_size,
)
```

```{python}
models_load: TrainStdDict[float, eqx.Module] = load(
    model_info.path, partial(setup_models_only, setup_task_model_pairs),
)

replicate_info = load(
    model_info.replicate_info_path, partial(setup_replicate_info, models_load),
)
```

### Modify the system noise if needed

```{python}
models_base = jt.map(
    partial(
        set_model_noise, 
        noise_stds=dict(
            feedback=feedback_noise_std,
            motor=motor_noise_std,
        ),
        enable_noise=True,
    ),
    models_load,
    is_leaf=is_module,
)
```

### Optionally select a subset of training conditions

Depending on how training goes, we might want to leave out some of the training conditions (i.e. training disturbance stds) from the analysis.

```{python}
disturbance_train_stds = model_info.disturbance_stds

models_base = subdict(models_base, disturbance_train_stds)
```

### Optionally exclude replicates that perform much worse than average

When plotting single-replicate examples, we want to show the best replicate. Also, when lumping together replicates and plotting distributions, we want to include as many replicates as possible to show how performance may vary, but also exclude replicates whose performance is much worse than the best replicate.

:::{note}
The logic here is that systems like the brain will have much more efficient learning systems, and that we are approximating their efficiency by taking advantage of variance between model initializations. 

In other words: we are interested in the kind of performance that is feasible with these kinds of networked controllers, more than the kind of performance that we should expect on average (or in the worst case) given the technical details of network initialization etc.
:::

```{python}
exclude_underperformers = True
```

```{python}
measure_to_exclude_by = 'best_total_loss'

included_replicates = replicate_info['included_replicates'][measure_to_exclude_by]
best_replicate = replicate_info['best_replicates'][measure_to_exclude_by]

def take_replicate_or_best(tree: TrainStdDict, i_replicate=None, replicate_axis=1):
    if i_replicate is None:
        map_func = lambda tree: TrainStdDict({
            train_std: tree_take(subtree, best_replicate[train_std], replicate_axis)
            for train_std, subtree in tree.items()
        })
    else:
        map_func = lambda tree: tree_take_multi(tree, [i_replicate], [replicate_axis])
        
    return jt.map(map_func, tree, is_leaf=is_type(TrainStdDict))
```

Which replicates are included?

```{python}
print("\nReplicates included in analysis for each training condition:")
eqx.tree_pprint(jt.map(lambda x: jnp.where(x)[0], included_replicates), short_arrays=False)
```

Set the indices corresponding to the excluded replicates to NaN in each of the model arrays. This ensures that the shapes of the arrays remain consistent. NaN results will be ignored at plotting time. 

```{python}
models_all_replicates = models_base

if exclude_underperformers:
    models_base = jt.map(
        lambda models, included: tree_set_scalar(models, jnp.nan, jnp.where(~included)[0]),
        models_base, included_replicates,
        is_leaf=is_module,
    )
    n_replicates_included = jt.map(lambda x: jnp.sum(x).item(), included_replicates)
else:
    models_base = models_base
    n_replicates_included = dict.fromkeys(models.keys(), model_info.n_replicates)
```

## Sort out the evaluation parameters

We will either be evaluating on specific disturbance types and noise conditions, or if none are specified here,
keeping the same conditions used during training.

```{python}
eval_parameters = use_record_params_where_none(dict(
    disturbance_type=disturbance_type,
    feedback_noise_std=feedback_noise_std,
    motor_noise_std=motor_noise_std,
), model_info)
```

```{python}
any_system_noise = any(jt.leaves((
    eval_parameters['feedback_noise_std'],
    eval_parameters['motor_noise_std'],
)))
```

### Disturbance amplitudes

```{python}
disturbance_amplitude = {
    'curl': 4,
    'random': 0.4,
}[eval_parameters["disturbance_type"]]
```

### Context inputs 

```{python}
context_inputs = [-4, -2, -1, -0.5, 0, 0.5, 1, 2, 4]
```

### Number of evaluations per model and condition

```{python}
n_evals = dict(
    full=5,
    small=5,
)

if not any_system_noise:
     n_evals = jt.map(lambda _: 1, n_evals)
```

### Full parameter dict

```{python}
eval_parameters |= dict(
    disturbance_amplitudes=[disturbance_amplitude],
    context_inputs=context_inputs,
    n_evals=n_evals['full'],
    n_evals_small=n_evals['small'],
)
```

## Initialize a record in the evaluations database

```{python}
eval_info = add_evaluation(
    db_session,
    model_hash=model_info.hash,
    eval_parameters=eval_parameters,
    notebook_id=NB_ID,
)
```

## Define tasks

### Define the disturbances

```{python}
# Evaluate only a single amplitude, for now;
# we want to see variation over the context input
if disturbance_type == 'curl':  
    def disturbance(amplitude):
        return CurlField.with_params(amplitude=amplitude)    
        
elif disturbance_type == 'random':   
    def disturbance(field_std):            
        return FixedField.with_params(
            scale=field_std,
            field=orthogonal_field,  
        ) 
          
else:
    raise ValueError(f"Unknown disturbance type: {disturbance_type}")
```

### Set up the base task 

See notebook 1-2a for some explanation of the parameter choices here.

```{python}
# Also add the intervenors to the trained models
task_base, models = schedule_intervenor(
    get_base_task(model_info.n_steps),
    trained_models,
    lambda model: model.step.mechanics,
    disturbance(disturbance_amplitude[disturbance_type]),
    label=INTERVENOR_LABEL,
    default_active=False,
)
```

### Set up variants with different context inputs

```{python}
def get_context_input_func(x):
    return lambda trial_spec, key: (
        jnp.full_like(trial_spec.intervene[INTERVENOR_LABEL].active, x, dtype=float)
    )

all_tasks = dict()

all_tasks['full'] = ContextInputDict({
    context_input: eqx.tree_at(
        lambda task: task.input_dependencies,
        task_base, 
        {'context': TrialSpecDependency(get_context_input_func(context_input))},
    )
    for context_input in context_inputs
})
```

Make smaller versions of the tasks for visualization.

```{python}
all_tasks['small'] = convert_tasks_to_small(tasks['full'])
``` 

### Assign some things for convenient reference

```{python}
example_task = {
    key: jt.leaves(tasks, is_leaf=is_module)[0]
    for key, tasks in all_tasks.items()
}

trial_specs = jt.map(lambda task: task.validation_trials, example_task, is_leaf=is_module)

pos_endpoints = jt.map(get_pos_endpoints, trial_specs, is_leaf=is_module)
```

## Setup colors for plots

```{python}
trials_colors, trials_colors_dark = get_colors_dicts(
    range(n_evals['full']), COLORSCALES['trials'],
)

# by training condition
# disturbance_train_stds_colors, disturbance_train_stds_colors_dark = get_colors_dicts(
#     disturbance_train_stds, COLORSCALES['disturbance_train_stds'],
# )

# by evaluation condition
# disturbance_amplitudes_colors, disturbance_amplitudes_colors_dark = get_colors_dicts(
#     disturbance_amplitudes, COLORSCALES['disturbance_amplitudes'], 
# )

# by context input 
context_input_colors, context_input_colors_dark = get_colors_dicts(
    context_inputs, COLORSCALES['context_inputs'],
)
```

## Evaluate the trained models on each evaluation task

```{python}
def evaluate_all_states(models, tasks, n_evals):
    return jt.map( # Map over task variants
        lambda models: jt.map(  # Map over training conditions (`models` entries)
            lambda task: vmap_eval_ensemble(models, task, n_evals, key_eval),
            tasks,
            is_leaf=is_module,
        ),
        models,
        is_leaf=is_module,
    )
```

```{python}
all_states_bytes = (
    tree_struct_bytes(eqx.filter_eval_shape(evaluate_all_states, models, all_tasks['full'], n_evals['full'])),
    tree_struct_bytes(eqx.filter_eval_shape(evaluate_all_states, models, all_tasks['small'], n_evals['small'])),
)

print(f"{sum(all_states_bytes) / 1e9:.2f} GB of memory estimated to store all states.")
```

```{python}
# Evaluate all task variants (full and small)
all_states = jt.map(
    lambda n, tasks: evaluate_all_states(models, tasks, n),
    n_evals, all_tasks,
)
```

### Project positions, velocities, and forces into reach direction

```{python}
Responses = namedtuple('Responses', ('pos', 'vel', 'force'))

aligned_var_labels = Responses('Position', 'Velocity', 'Control force')
where_vars_to_align = lambda states, pos_endpoints: Responses(
    # Positions with respect to the origin
    states.mechanics.effector.pos - pos_endpoints[0][..., None, :],
    states.mechanics.effector.vel,
    states.efferent.output,
)
```

```{python}   
aligned_vars = {
    variant: jt.map(
        lambda all_states: get_aligned_vars(all_states, where_vars_to_align, pos_endpoints[variant]),
        all_states[variant],
        is_leaf=is_module,
    )
    for variant in all_states
}
```

## Plot aligned trajectories

i.e. for a single reach direction, compare multiple trials/replicates different training conditions; visualize how training on different disturbance strengths affects response.

```{python}
plot_id = "aligned_to_reach_condition"
```

```{python}
n_curves_max = 20

plot_condition_trajectories = partial(
    fbp.trajectories_2D,
    var_labels=aligned_var_labels,
    axes_labels=('x', 'y'),
    # mode='std',
    mean_trajectory_line_width=3,
    n_curves_max=n_curves_max,
    darken_mean=MEAN_LIGHTEN_FACTOR,
    layout_kws=dict(
        width=900,
        height=400,
        legend_tracegroupgap=1,
        margin_t=75,
    ),
    scatter_kws=dict(
        line_width=1, 
        opacity=0.6,
    ),
)
```

### Comparison across context inputs

```{python}
plot_id = "aligned_to_reach_condition/compare_context_inputs"
```

```{python}
plot_vars_stacked = jt.map(
    lambda d: tree_stack(d.values()),
    aligned_vars['small'],
    is_leaf=is_type(ContextInputDict),
)
```

```{python}
figs = jt.map(
    partial(
        plot_condition_trajectories, 
        colorscale=COLORSCALES['context_inputs'],
        colorscale_axis=0,
        # stride=stride,
        legend_title="Context input",
        legend_labels=context_inputs,
        curves_mode='lines',
        var_endpoint_ms=0,
        scatter_kws=dict(line_width=0.5, opacity=0.3),
        # ref_endpoints=(pos_endpoints, None),
    ),
    plot_vars_stacked,
    is_leaf=is_type(Responses),
)
```


```{python}
for path, fig in tqdm(figs_flatten_with_paths(figs)):
    training_method = path[0].key
    disturbance_train_std = path[1].key
    
    add_endpoint_traces(fig, POS_ENDPOINTS_ALIGNED['small'], xaxis='x1', yaxis='y1')
    
    fig_parameters = dict(
        training_method=training_method,
        disturbance_type=disturbance_type,
        disturbance_type_train=disturbance_type_train,
        disturbance_train_std=disturbance_train_std,
        disturbance_amplitude=disturbance_amplitude,
        # TODO: The number of replicates (`n_replicates_included`) may vary with the disturbance train std!
        # n=min(n_evals['small'] * n_replicates, n_curves_max),
    )
    
    add_evaluation_figure(
        db_session,
        eval_info,
        fig,
        plot_id,
        **fig_parameters,
    )
```

## Measure distributions

**TODO**